openapi: 3.0.1
info:
  title: npsstore API
  description: This is a Backend API of NBSStore
  version: 1.0.0
  termsOfService: http://quocbaoit.com/terms/
  contact:
    email: NBSstoreProject@quocbaoit.com
tags:
  - name: Order
    description: Access to NBSstore orders
    externalDocs:
      description: Find out more
      url: http://fb.quocbaoit.com
  - name: Product
    description: Everything about our products
  - name: User
    description: Operations about user
paths:
  /api/v1/product:
    post: #done
      description: Create a new product
      summary: Create a new product
      tags:
        - Product
      requestBody:
        description: Payload to create a new product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductForm'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get: #done
      description: Get a part of products to show on shop client (non-user, user, admin)
      summary: Get a part of products to show on shop client (non-user, user, admin)
      tags:
        - Product
      parameters:
        - in: query
          name: pageSize
          required: false
          schema:
            type: number
          description: Number of products in 1 page
        - in: query
          name: pageNumber
          required: false
          schema:
            type: number
          description: Page number
        - in: query
          name: keyword
          required: false
          schema:
            type: string
          description: Keyword of product name to find in DB
        - in: query
          name: dateOrder
          required: false 
          schema:
            type: string
          description: Sort products by date (newest/latest)
        - in: query
          name: priceOrder
          required: false
          schema: 
            type: string
          description: Sort products by price (asc/desc)
        - in: query
          name: category
          required: false
          schema:
            type: string
          description: Product category name
        - in: query
          name: status
          required: false
          schema:
            type: string
          description: Sort products by status (disabled/notDisabled/all)        
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  page:
                    type: number
                    description: current product page number
                  pages:
                    type: number
                    description: total product pages
                  products:
                    type: array
                    description: total product in 1 page
                    items:
                      $ref: '#/components/schemas/Product'
                  total:
                    type: number
                    description: total products                   
        # '204':
        #   description: No products found for this keyword
        #   content:
        #     application/json:
        #       schema:
        #         $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  # /api/v1/product/all: #done
  #   get:
  #     summary: Return all products of store
  #     description: This api requires authorization with token JWT
  #     tags:
  #       - Product
  #     security:
  #       - bearerAuth: []
  #     responses:
  #       '200':
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Product'
  #       '401':
  #         description: Unauthorized
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  /api/v1/product/{id}: #done
    get: 
      summary: Get matched product with given id (product detail)
      description: Get matched product with given id (product detail)
      tags:
        - Product
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put: #done
      summary: Update existed product
      description: Update existed product
      tags:
        - Product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      requestBody:
        description: Payload to update product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductForm'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete existed product
      description: Delete existed product
      tags:
        - Product
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/product/{id}/review:
    post:
      summary: Review a product
      description: Review a product
      security:
        - bearerAuth: []
      tags:
        - Product
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      requestBody:
        description: Payload to review a product
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  description: User ratings (5-stars rating)
                  minimum: 1
                  maximum: 5
                  nullable: false
                reviewContent:
                  type: string
                  description: Review content
                  nullable: true                  
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/product/{id}/disable:
    patch:
      summary: Disable a product
      description: Disable a product
      security:
        - bearerAuth: []
      tags:
        - Product
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      requestBody:
        description: isDisabled value
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isDisabled:
                  type: boolean
                  description: Is disabled or not
                  nullable: false
                  default: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/product/{id}/restore:
    patch:
      summary: Restore disabled product
      description: Restore disabled product
      security:
        - bearerAuth: []
      tags:
        - Product
      parameters:
        - name: id
          in: path
          description: Product ID
          required: true
          schema:
            type: string
      requestBody:
        description: isDisabled value
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isDisabled:
                  type: boolean
                  description: Is disabled or not
                  nullable: false
                  default: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/product/{id}/comments:
      get:
        summary: Get product comments
        description: Get product comments
        tags:
          - Product
        parameters:
          - name: id
            in: path
            description: Product ID
            required: true
            schema:
              type: string
        responses:
          '200':
            description: Success
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Comment'
          '404':
            description: Not Found
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'             

  /api/v1/user/login:
    post:
      summary: Logs user into the system
      tags:
        - User
      requestBody:
        description: Payload to login
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  nullable: true
                password:
                  type: string
                  nullable: true
              additionalProperties: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/MyUser'
                  - type: object
                    properties:
                      createdAt:
                        type: string
                        description: created timestamp
                        format: date-time
                      refreshToken:
                        type: string
                        description: JWT Refresh Token
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/user:
    post:
      summary: Create new user account
      description: This can only be done by the logged in user.
      tags:
        - User
      requestBody:
        description: Payload to create new user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  nullable: false
                email:
                  type: string
                  nullable: false
                password:
                  type: string
                  nullable: false
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/MyUser'
                  - type: object
                    properties:
                      refreshToken:
                        type: string
                        description: JWT Refresh Token
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Get all users by admin
      description: Get all users by admin
      tags:
        - User
      parameters:
        - in: query
          name: dateOrder
          required: false 
          schema:
            type: string
          description: Sort users by date (newest/latest)
        - in: query
          name: status
          required: false
          schema: 
            type: string
          description: Filter users by status (disabled/notDisabled/all)        
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/MyUser'
                    - type: object
                      properties:
                        createdAt:
                          type: string
                          description: The date and time when this record is created
                          format: date-time
                        updatedAt:
                          type: string
                          description: The date and time when this record is updated
                          format: date-time
                        __v:
                          type: number
                          description: Document version key
                        password:
                          type: string
                          description: User password
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/user/profile:
    get:
      security:
        - bearerAuth: []
      tags:
        - User
      description: Users get their profile
      summary: Users get their profile
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      security:
        - bearerAuth: []
      tags:
        - User
      description: Users update their profile
      summary: Users update their profile
      requestBody:
        description: Payload to update profile
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  nullable: true
                email:
                  type: string
                  nullable: true
                password:
                  type: string
                  nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyUser'
        '400':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/user/CreateOrUpdateAvatar/{userId}:
    post:
      summary: Upload/Update Avater for User
      description: Upload/Update Avatar for User
      tags:
        - User
      parameters:
        - name: userId
          in: path
          description: _id of the user that needs to update the avatar, if you is admin
          required: false
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
            encoding:
              file:
                style: form
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrUpdateAvatar'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/user/{id}/disable:
    patch:
      summary: Disable a user
      description: Disable a user
      security:
        - bearerAuth: []
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        description: isDisabled value
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isDisabled:
                  type: boolean
                  description: Is disabled or not
                  nullable: false
                  default: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/user/{id}/restore:
    patch:
      summary: Restore disabled user
      description: Restore disabled user
      security:
        - bearerAuth: []
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      requestBody:
        description: isDisabled value
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isDisabled:
                  type: boolean
                  description: Is disabled or not
                  nullable: false
                  default: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/user/{id}:
    delete:
      summary: Delete existed user
      description: Delete existed user
      security:
        - bearerAuth: []
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/order:
    post:
      summary: Create new order
      description: Create new order
      tags:
        - Order
      security:
        - bearerAuth: []
      requestBody:
        description: Order form
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderForm'
      responses:
        '400':
          description: No order items/One or more product order quantity exceed available quantity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: Admin get orders
      description: Admin get orders
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: dateOrder
          required: false 
          schema:
            type: string
          description: Sort orders by date (newest/latest)
        - in: query
          name: status
          required: false
          schema: 
            type: string
          description: Filter orders by status (disabled/notDisabled/all)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/order/ordered:
    get:
      summary: User get their orders
      description: User get their orders
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: dateOrder
          required: false 
          schema:
            type: string
          description: Sort orders by date (newest/latest)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Order'                 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/order/{id}:
    get:
      summary: Get order by id
      description: Get order by id
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete an order
      description: Delete an order
      security:
        - bearerAuth: []
      tags:
        - Order
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/order/{id}/pay:
    patch:
      summary: Confirm order is paid
      description: Confirm order is pad
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
      requestBody:
        description: Payload to confirm an order is paid
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmPaidForm'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/order/{id}/delivered:
    patch:
      summary: Confirm order is delivered
      description: Confirm order is delivered
      tags:
        - Order
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
      requestBody:
        description: Payload to confirm an order is delivered
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmDeliveredForm'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
  /api/v1/order/{id}/disable:
    patch:
      summary: Disable an order
      description: Disable an order
      security:
        - bearerAuth: []
      tags:
        - Order
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
      requestBody:
        description: isDisabled value
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isDisabled:
                  type: boolean
                  description: Is disabled or not
                  nullable: false
                  default: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/order/{id}/restore:
    patch:
      summary: Restore disabled order
      description: Restore disabled order
      security:
        - bearerAuth: []
      tags:
        - Order
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
      requestBody:
        description: isDisabled value
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isDisabled:
                  type: boolean
                  description: Is disabled or not
                  nullable: false
                  default: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /api/v1/category: 
    post: 
      description: Create a new category
      summary: Create a new category
      tags:
        - Category
      security:
        - bearerAuth: []
      requestBody:
        description: Payload to create a new category
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryForm'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary:  Get all categories (non-user, user, admin)
      description: Get all categories (non-user, user, admin)
      tags:
        - Category
      parameters:
        - in: query
          name: dateOrder
          required: false 
          schema:
            type: string
          description: Sort categories by date (newest/latest)
        - in: query
          name: status
          required: false
          schema: 
            type: string
          description: Filter categories by status (disabled/notDisabled/all) 
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  # /api/v1/category/all:
  #   get:
  #     summary:  Admin get all categories 
  #     description: Admin get all categories 
  #     tags:
  #       - Category
  #     responses:
  #       '200':
  #         description: Success
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Category' 
  /api/v1/category/{id}: 
    put:
      summary: Update exsited category
      tags:
        - Category
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      requestBody:
        description: Payload to update a new category
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryForm'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
    delete:
      summary: Delete existed category
      description: Delete existed category
      security:
        - bearerAuth: []
      tags:
        - Category
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/category/{id}/disable:
    patch:
      summary: Disable a category
      description: Disable a category
      security:
        - bearerAuth: []
      tags:
        - Category
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      requestBody:
        description: isDisabled value
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isDisabled:
                  type: boolean
                  description: Is disabled or not
                  nullable: false
                  default: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/category/{id}/restore:
    patch:
      summary: Restore disabled category
      description: Restore disabled category
      security:
        - bearerAuth: []
      tags:
        - Category
      parameters:
        - name: id
          in: path
          description: Category ID
          required: true
          schema:
            type: string
      requestBody:
        description: isDisabled value
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isDisabled:
                  type: boolean
                  description: Is disabled or not
                  nullable: false
                  default: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
  /api/v1/producer: 
    post: 
      description: Create a new producer
      summary: Create a new producer
      tags:
        - Producer
      security:
        - bearerAuth: []
      requestBody:
        description: Payload to create a new producer
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProducerForm'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producer'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/producer/: 
    get:
      summary:  Get all producers (admin)
      description: Get all producers (admin)
      tags:
        - Producer
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: dateOrder
          required: false 
          schema:
            type: string
          description: Sort producers by date (newest/latest)
        - in: query
          name: status
          required: false
          schema: 
            type: string
          description: Filter producers by status (disabled/notDisabled/all)           
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'                  
  /api/v1/producer/{id}: 
    put:
      summary: Update existed producer
      tags:
        - Producer
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Producer ID
          required: true
          schema:
            type: string
      requestBody:
        description: Payload to create a new producer
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProducerForm'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producer'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete existed producer
      description: Delete existed producer
      security:
        - bearerAuth: []
      tags:
        - Producer
      parameters:
        - name: id
          in: path
          description: Producer ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/producer/{id}/disable:
    patch:
      summary: Disable a producer
      description: Disable a producer
      security:
        - bearerAuth: []
      tags:
        - Producer
      parameters:
        - name: id
          in: path
          description: Producer ID
          required: true
          schema:
            type: string
      requestBody:
        description: isDisabled value
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isDisabled:
                  type: boolean
                  description: Is disabled or not
                  nullable: false
                  default: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/producer/{id}/restore:
    patch:
      summary: Restore disabled producer
      description: Restore disabled producer
      security:
        - bearerAuth: []
      tags:
        - Producer
      parameters:
        - name: id
          in: path
          description: Producer ID
          required: true
          schema:
            type: string
      requestBody:
        description: isDisabled value
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                isDisabled:
                  type: boolean
                  description: Is disabled or not
                  nullable: false
                  default: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producer'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/cart/: 
    get:
      summary:  User get cart
      description: User get cart
      tags:
        - Cart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
  /api/v1/cart/add: 
    patch:
      summary:  User add product into cart
      description: User add product into cart
      tags:
        - Cart
      security:
        - bearerAuth: []
      requestBody:
        description: Cart item payload
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: Cart item product id
                  nullable: false
                qty:
                  type: string
                  description: Cart item quantity
                  default: 1      
                size:
                  type: number
                  description: Cart item size     
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
  /api/v1/cart/update: 
    patch:
      summary:  User update existed cart item
      description: User update existed cart item
      tags:
        - Cart
      security:
        - bearerAuth: []
      requestBody:
        description: Cart item payload
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productId:
                  type: string
                  description: Cart item product id
                  nullable: false
                qty:
                  type: string
                  description: Cart item quantity
                  default: 1      
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '204':
          description: No Content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'      
  /api/v1/cart/remove: 
    patch:
      summary:  User remove selected cart items
      description: User remove selected car items
      tags:
        - Cart
      security:
        - bearerAuth: []
      requestBody:
        description: Product id array
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
  /api/v1/comment: 
    post:
      summary:  User post new comment
      description: User post new comment
      tags:
        - Comment
      security:
        - bearerAuth: []
      requestBody:
        description: Comment payload
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/CommentForm'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'        
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
    get:
      summary:  Non-user, user admin get comments
      description: Non-user, user admin get comments
      tags:
        - Comment
      parameters:
        - in: query
          name: dateOrder
          required: false 
          schema:
            type: string
          description: Sort comments by date (newest/latest)
        - in: query
          name: status
          required: false
          schema: 
            type: string
          description: Filter comment by status (disabled/notDisabled/all)
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'       
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'                 
  /api/v1/comment/{commentId}: 
    delete:
      summary:  User, admin delete comment
      description: User, admin delete comment
      security:
        - bearerAuth: []
      tags:
        - Comment
      parameters:
        - name: commentId
          in: path
          description: Comment Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
  /api/v1/comment/{commentId}/content: 
    patch:
      summary:  User, admin change comment
      description: User, admin change comment
      security:
        - bearerAuth: []
      tags:
        - Comment
      parameters:
        - name: commentId
          in: path
          description: Comment Id
          required: true
          schema:
            type: string
      requestBody:
        description: Comment content
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  description: Comment content
                  nullable: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'                  
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
  /api/v1/comment/{commentId}/disable: 
    patch:
      summary:  User, admin disable comment
      description: User, admin disable comment
      security:
        - bearerAuth: []      
      tags:
        - Comment
      parameters:
        - name: commentId
          in: path
          description: Comment Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'                     
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'                  
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/comment/{commentId}/restore: 
    patch:
      summary:  User, admin restore comment
      description: User, admin restore comment
      security:
        - bearerAuth: []            
      tags:
        - Comment
      parameters:
        - name: commentId
          in: path
          description: Comment Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '400':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
  /api/v1/refresh-token/refresh:
    patch:
      summary: User refresh access token
      tags:
        - Refresh Token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  description: JWT refresh token
                  nullable: false
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT access token
                  refreshToken: 
                    type: string
                    description: JWT refresh token             
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'      

externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
components:
  schemas:
    CreateOrUpdateAvatar:
      type: object
      properties:
        _id:
          type: string
          description: user id
        name:
          type: string
          description: username
        email:
          type: string
          description: email
        avatarUrl:
          type: string
          description: avatar url
        isAdmin:
          type: boolean
          description: is Admin or not
        isDisabled:
          type: boolean
          description: is Disabled or not
    MyUser:
      type: object
      properties:
        _id:
          type: string
          description: user id
        name:
          type: string
          description: username
        email:
          type: string
          description: email
        avatarUrl:
          type: string
          description: avatar url
        isAdmin:
          type: boolean
          description: is Admin or not
        token:
          type: string
          description: JWT login token
        isDisabled:
          type: boolean
          description: is Disabled or not
    User:
      type: object
      allOf:
        - $ref: '#/components/schemas/MyUser'
        - type: object
          properties:
            _id:
              type: string
              description: password

    Error:
      type: object
      properties:
        message:
          type: string
          description: error message
        stack:
          type: string
          description: error message description
    Product:
      type: object
      properties:
        _id:
          type: string
          description: Product ID
        name:
          type: string
          description: Product name
        image:
          type: string
          description: Product image's url
        description:
          type: string
          description: Product description
        reviews:
          type: array
          description: User reviews
          items:
            $ref: '#/components/schemas/Review'
        rating:
          type: number
          description: User ratings (5-stars rating)
        numReviews:
          type: number
          description: Number of reviews
        price:
          type: number
          description: Product price
        countInStock:
          type: number
          description: Total amount of a product available
        category:
          type: string
          description: Product category id
        totalSales:
          type: number
          description: Product total sales
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        __v:
          type: number
          description: Document version key
        isDisabled:
          type: boolean
          description: is Disabled or not
    UserProfile:
      type: object
      properties:
        _id:
          type: string
          description: user id
        name:
          type: string
          description: username
        email:
          type: string
          description: email
        avatarUrl:
          type: string
          description: avatar url
        isAdmin:
          type: boolean
          description: is Admin or not
        isDisabled:
          type: boolean
          description: is Disabled or not
    ProductForm:
      type: object
      properties:
        name:
          type: string
          description: Product ID
        size:
          type: number
          description: Product size
        price:
          type: number
          description: Product price
        description:
          type: string
          description: Product description
        image:
          type: string
          description: Product image's url
        countInStock:
          type: number
          description: Total amount of a product available
        category:
          type: string
          description: Product category ID
    Timestamp:
      type: object
      properties:
        createAt:
          type: string
          description: The date and time when this record is created
          format: date-time
        updatedAt:
          type: string
          description: The date and time when this record is updated
          format: date-time
    Review:
      type: object
      properties:
        rating:
          type: integer
          description: User ratings (5-stars rating)
          minimum: 1
          maximum: 5
        reviewContent:
          type: string
          description: Review content          
        user:
          type: string
          description: User ID
        timestamp:
          $ref: '#/components/schemas/Timestamp'
    OrderItem:
      type: object
      properties:
        name:
          type: string
          description: Order item name
        qty:
          type: number
          description: Order item quantity
        image:
          type: string
          description: Order item image's url
        price:
          type: number
          description: Order item price
        product:
          type: string
          description: Order item ID
    ShippingAddress:
      type: object
      properties:
        address:
          type: string
          description: Shipping address
        city:
          type: string
          description: Shipping city
        postalCode:
          type: string
          description: Shipping postal code
        country:
          type: string
          description: Shipping country
    PaymentResult:
      type: object
      properties:
        id:
          type: string
          description: Payment result ID
        status:
          type: string
          description: Payment status
        update_time:
          type: string
          format: date-time
        email_address:
          type: string
          description: Order email address
    OrderForm:
      type: object
      properties:
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        shippingAddress:
          $ref: '#/components/schemas/ShippingAddress'
        paymentMethod:
          type: string
          description: Payment method
          default: Paypal
        itemsPrice:
          type: number
          description: Items price
        taxPrice:
          type: number
          description: Tax price
          default: 0
        shippingPrice:
          type: number
          description: Shipping price
          default: 0
        totalPrice:
          type: number
          description: Total price
          default: 0
    Order:
      type: object
      properties:
        user:
          type: string
          description: Ordered user ID
        orderItems:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/OrderItem'
              - type: object
                properties:
                  _id:
                    type: string
                    description: Order item ID
        shippingAddress:
          $ref: '#/components/schemas/ShippingAddress'
        paymentMethod:
          type: string
          description: Payment method
          default: Paypal
        taxPrice:
          type: number
          description: Tax price
          default: 0
        shippingPrice:
          type: number
          description: Shipping price
          default: 0
        totalPrice:
          type: number
          description: Total price
          default: 0     
        isPaid:
          type: boolean
          description: Is paid yet ?
        isDelivered:
          type: boolean
          description: Is deliverd yet ?
        _id: 
          type: string
          description: Order ID
        timestamp: 
          $ref: '#/components/schemas/Timestamp'
        __v: 
          type: number
          description: Document version key
        isDisabled:
          type: boolean
          description: is Disabled or not
    OrderedUser:
      type: object
      properties:
        _id:
          type: string
          description: User ID
        name:
          type: string
          description: User name
    OrderItemWithID:
      allOf:
        - $ref: '#/components/schemas/OrderItem'
        - type: object
          properties:
            _id:
              type: string
              description: Order item ID
    ConfirmPaidForm:
      type: object
      properties:
        id:
          type: string
          description: Ordered user ID
        status:
          type: string
          description: Paid status
        update_time: 
          type: string
          description: The date and time when this record is updated
          format: date-time
        email_address:
          type: string
          description: Ordered user address
    ConfirmDeliveredForm:
      type: object
      properties:
        isDelivered:
          type: boolean
          description: Is delivered yet ?
        status:
          type: string
          description: Delivered status
    CategoryForm:
      type: object
      properties:
        name:
          type: string
          description: Category name
        slug:
          type: string
          description: Category slug
        status:
          type: boolean
          description: Category status
          default: true 
    Category:
      type: object
      properties:
        _id: 
          type: string
          description: Category Id
        name:
          type: string
          description: Category name
        slug:
          type: string
          description: Category slug
        status:
          type: boolean
          description: Category status
          default: true    
        timestamp:
          $ref: '#/components/schemas/Timestamp' 
        createdBy:
          type: string
          description: User object id who created this record
        updatedBy:
          type: string
          description: User object id who updated this record
        isDisabled:
          type: boolean
          description: is Disabled or not
    ProducerForm:
      type: object
      properties:
        name:
          type: string
          description: Producer name
        code:
          type: string
          description: Producer code
        keyword:
          type: boolean
          description: Producer keyword
          default: true 
        status:
          type: boolean
          description: Producer status
          default: true
    Producer:
      type: object
      properties:
        name:
          type: string
          description: Producer name
        code:
          type: string
          description: Producer code
        keyword:
          type: boolean
          description: Producer keyword
          default: true 
        status:
          type: boolean
          description: Producer status
          default: true
        timestamp:
          $ref: '#/components/schemas/Timestamp' 
        createdBy:
          type: string
          description: User object id who created this record
        updatedBy:
          type: string
          description: User object id who updated this record
        isDisabled:
          type: boolean
          description: is Disabled or not
    CartItem:
      type: object
      properties:
        product: 
          $ref: '#/components/schemas/Product'
        qty: 
          type: number
          description: Cart item quantity
          minimum: 0
        size: 
          type: number
          description: Cart item size
          minimum: 0
        _id: 
          type: string
          description: Cart item object id
    Cart:
      type: object
      properties:
        _id: 
          type: string
          description: Cart Object id
        user: 
          type: string
          description: User id
        cartItems:
          type: array 
          items: 
            $ref: '#/components/schemas/CartItem'
        __v:
          type: number
          description: Document version key
    # Comment:
    #   type: object
    #   properties:
    #     _id: 
    #       type: string
    #       description: Cart Object id
    #     user: 
    #       type: string
    #       description: User id
    #     product:
    #       type: string 
    #       description: Product object id
    #     content: 
    #       type: string
    #       description: Comment content
    #     parentComment:
    #       type: string
    #       description: Parent comment object id
    #     replies:
    #       type: array
    #       items: 
    #         $ref: '#/components/schemas/Comment'
    #       description: Commnet replies
    #     isDisabled:
    #       type: boolean
    #       description: is Disabled or not
    #     timestamp:
    #       $ref: '#/components/schemas/Timestamp'
    #     __v:
    #       type: number
    #       description: Document version key
    Comment:
      type: object
      properties:
        _id: 
          type: string
          description: Cart Object id
        user: 
          $ref: '#/components/schemas/User'
        product:
          type: string 
          description: Product object id
        content: 
          type: string
          description: Comment content
        parentComment:
          type: string
          description: Parent comment object id
        replies:
          type: array
          items: 
            $ref: '#/components/schemas/Comment'
          description: Commnet replies
        isDisabled:
          type: boolean
          description: is Disabled or not
        timestamp:
          $ref: '#/components/schemas/Timestamp'
        __v:
          type: number
          description: Document version key
    CommentForm:
      type: object
      properties:
        productId:
          type: string 
          description: Product object id
        content: 
          type: string
          description: Comment content
        parentCommentId:
          type: string
          description: Parent comment object id
          nullable: true
  # 1) Define the security scheme type (HTTP bearer)
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: apiKey
      description: "<i>JWT Authorization header using the Bearer scheme.</i> <b>Example</b>: <i><u>Bearer 12345abcdef</u></i>"
      in: header          # can be "header", "query" or "cookie"
      name: Authorization # name of the header, query parameter or cookie
# 2) Apply the security globally to all operations
security:
  - bearerAuth: [] # use the same name as above
